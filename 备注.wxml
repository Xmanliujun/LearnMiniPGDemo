<!-- 
小程序官方文档
https://developers.weixin.qq.com/miniprogram/dev/component/

/**
配置小程序
Project.config.json 项目配置文件，比如项目名称、appid、小程序版本等其他相关设置
在小程序开发工具右上角 详情 按钮中的设置

Sitemap.json 配置微信内部搜索 可设置开关
小程序根目录下的 sitemap.json 文件用于配置小程序及其页面是否允许被微信索引，文件内容为一个 JSON 对象，如果没有 sitemap.json ，则默认为所有页面都允许被索引；

app.json 全局配置
小程序根目录下的 app.json 文件用来对微信小程序进行全局配置。文件内容为一个 JSON 对象
pages：【】中要配置页面的路径,可以手动添加文件路径，保存之后自动生成


Page.json 页面配置
每一个小程序页面也可以使用 .json 文件来对本页面的窗口表现进行配置。页面中配置项在当前页面会覆盖 app.json 的 window 中相同的配置项。文件内容为一个 JSON 对象

导航设置
 "window": {
    "navigationBarBackgroundColor": "#ff5777",背景颜色
    "navigationBarTextStyle": "white",标题颜色
    "navigationBarTitleText": "导航标题",
    "backgroundColor": "#AAAAFF",下拉后的背景颜色
    "backgroundTextStyle": "dark",下拉提示状态
    "enablePullDownRefresh": true 是否全局下拉功能
  }
  标题可以在界面中的json文件单独设置
    "navigationBarTitleText": "导航标题",
  下拉刷新功能 可以在界面json文件单独设置
   "enablePullDownRefresh": true
   ** 页面配置会覆盖全局配置**

下导航设置 list最少两项，图片自己创建目录导入
"tabBar": {
    "selectedColor": "#ff5777", 选中字体颜色
    "list": [
      {
        "pagePath": "pages/home/home",调整界面路径
        "text": "home",标题
        "iconPath": "assets/images/tabBar/m4.png",默认图片
        "selectedIconPath": "assets/images/tabBar/m5.png" 选中图片
      },
      {
        "pagePath": "pages/about/about",
        "text": "about",
        "iconPath": "assets/images/tabBar/m8.png",
        "selectedIconPath": "assets/images/tabBar/m9.png"
      }
    ]
  }

/**
    app.js 文件 App方法中可以监听 界面生命周期，和获取用户信息、场景
   * 当小程序启动，或从后台进入前台显示，会触发 onShow
   */
  onShow: function (options) {
    //1.获取小程序的进入场景options.secen
    console.log(options)
    //2.获取用户信息
    wx.getUserInfo({
      success:function(res){
        console.log(res)
      }
    })

  },

获取用户信息方法2 
<button size="mini" open-type="getUserInfo" bindgetuserinfo="buttongetMyUserInfo" >获取授权</button>

  buttongetMyUserInfo(event){
    console.log("获取授权")
    console.log(event)
  },

App.js中定义的全局数据，可以在其他界面的js中获取到
  App.js中方法 
  globalData:{
    name:'myName',
    age:20
  }
  home.js中获取

  /* 设置文字水平垂直居中 ，设置布局大小  在view.wxss中*/
  display: table-cell;
  vertical-align:middle;
  width: 200px;
  height: 100px;


  共同属性：
  id、class、style（组件内联样式）、hidden、data

  wxss目录中 有导入样式文件方法，三种样式方法，优先级介绍
  @import './style/box.wxss';
  
  引用UI库例子
  @import './style/weui-searchbar.wxss';
  
  三种样式作用于同一个组件 
  行内内最高级，页内其次，全局最后
  !important 加入这个权重最大
  
  全局样式引入
  在app.wxss中 @import './style/btn.wxss';

wxml文件包中内容
Mustache语法细节、
<view>{{Msg}}</view>
<view>{{firstName}} {{lastName}}</view>
<view>{{firstName +' '+ lastName}}</view>
<view>{{age >= 18 ? '成年人' : '未成年人'}}</view>
 获取实时时间 
<view>{{nowTime}}</view>
获取class 进行标签操作 
<button size="mini" bindtap="buttonClick">切换颜色</button>
<view class="wx-box {{isActive ? 'active' : ''}}" >哈哈哈</view>

条件判断 
wx:if  wx:elif  wx:else
wx:if 的使用 
<button size="mini" bindtap="buttonIfCilck">显示隐藏</button>
<view wx:if="{{isShow}}">条件判断</view>

wx:if  wx:elif  wx:else
<button size="mini" bindtap="buttonUpCilck">更改变量</button>
<view wx:if="{{score >=90}}">优秀</view>
<view wx:elif="{{score >= 80}}">良好</view>
<view wx:elif="{{score >= 70}}">及格</view>
<view wx:else>不及格</view>


 2.block标签 block包裹之后不会进行渲染 ，
他不是组件，仅仅是一个包装元素，只接受控制属性
性能更高
1、将需要进行遍历或者判断的内容进行包裹
2、将遍历和判断的属性放在block中，不影响普通属性的阅读，提高代码可读性

<block wx:for="{{2}}">
  <button>按钮</button>
  <text>啊啊啊</text>
  <view>哈哈哈</view>
</block>

 事件的传递参数 
data-index《index是起名字，可以随便起》="{{index}}《要传的参数》"

<view class="container">
  <block wx:for="{{titles}}" wx:key="{{index}}">
    <view class="item"
          bindtap="handleItemClick" 
          data-index="{{index}}"
          data-item="{{item}}"
    >{{item}}</view>
  </block>
</view>


 事件冒泡和事件捕获 
capture-bind:tap 监听事件捕获
bindtap 监听事件冒泡
bind 会一层一层传递
catch 阻止事件进一步传递
<!-- <view class="view1" capture-bind:tap="handlecaptureview1" bindtap="handleview1">view1
  <view class="view2" capture-catch:tap="handlecaptureview2" bindtap="handleview2">view2
    <view class="view3" capture-bind:tap="handlecaptureview3" bindtap="handleview3">view3</view>
  </view>
</view> 




组件使用
my-cpn 是组件使用时候的标签名称
 在对用使用的json文件中创建
{
  "usingComponents": {
    "my-cpn":"/自定义组件/my-cpn/my-cpn"
  }
}
在对应的wxml中使用 创建的标签 my-cpn 自定义组件
<my-cpn></my-cpn>
** 自定义组件可以在app.json中声明，在app.json中加入以下节点 进行声明，全局都可以使用
但是这样容易逻辑不清楚，公共组件可以这样声明，嵌套组件最近是在对应文件的json中声明
"usingComponents": {
    "my-cpn":"/自定义组件/my-cpn/my-cpn"
  }




小程序登录流程
在App.js的onLaunch函数中操作
code只有5分钟有效时间
 wx.login({
      success:function(res){
        console.log('微信登录获取code',res.code)
      }
  })

相关登录流程在 app.js 中有详细标注

login  登录函数
check_token  验证token函数
globalData 存储数据
wx.setStorageSync(TOKEN, token) 存入缓存
const token = wx.getStorageSync(TOKEN) 获取本地



*/ 

/**
终端进入文件夹
git init
git add .
git commit -m '备注'
git remote add origin https: //github.com/Xmanliujun/LearnMiniPGDemo.git (github仓库地址)
输入git账号 和 密码
git push -u origin master
上传完成

版本tag分支
git add .  加入本地git
git commit -m  ‘更新代码 ’（’’里加提交备注）
git tag 名称（+tag名称）
git tag   可以查看所有tag

git status    查看现在代码状态
git log         查看所有提交
git reset --hard 123123（hard后面空格+版本号，git log可以看到版本号）  强制回退到指定版本

git push --tags  将本地的所有tag上传到github上，
在对应的库里branch：master中可以看到所有上传的tag。

获取对应tag的版本代码
在网站库里下载按钮clone or dewnload复制下载地址,在电脑本地新建文件夹之后，从终端进入该文件夹
输入：git clone https: //github.com/Xmanliujun/LearnMiniPGDemo.git 
（加上下载地址https: //github.com/Xmanliujun/LearnMiniPGDemo.git）
之后项目下载完成后就可以导入开发环境
之后就可以切换开发环境中的tag版本的代码查看了
git checkout tag名称 （checkout后面加上要切换到哪个tag的名称）

*/ 





 -->